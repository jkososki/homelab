#!/bin/bash -e

FILES=(
  "$(PWD)/bootstrap/certs/localhost/key.pem" 
  "$(PWD)/bootstrap/certs/localhost/cert.pem"
  "$(PWD)/bootstrap/ssh-keys/id_rsa"
  "$(PWD)/bootstrap/ssh-keys/id_rsa.pub"
  "$(PWD)/bootstrap/ssh-gitserver/ssh_host_ecdsa_key"
  "$(PWD)/bootstrap/ssh-gitserver/ssh_host_ecdsa_key.pub"
  "$(PWD)/bootstrap/ssh-gitserver/ssh_host_ed25519_key"
  "$(PWD)/bootstrap/ssh-gitserver/ssh_host_ed25519_key.pub"
  "$(PWD)/bootstrap/ssh-gitserver/ssh_host_rsa_key"
  "$(PWD)/bootstrap/ssh-gitserver/ssh_host_rsa_key.pub"
)


for FILE in "${FILES[@]}"; do
  if [ ! -f "$FILE" ]; then
    echo "Error: $FILE does not exist."
    exit 1
  fi
done


CLUSTER_NAME=homelab
KIND_CONFIG=bootstrap/tmp.kind-config.yaml
cat bootstrap/kind-config.yaml | envsubst > $KIND_CONFIG

echo "Creating cluster $CLUSTER_NAME"
kind create cluster \
  -n $CLUSTER_NAME \
  --config $KIND_CONFIG

sleep 5
CURRENT_CLUSTER=$(kubectl config current-context)
if [ "$CURRENT_CLUSTER" != "$CLUSTER_NAME" ]; then
  echo "Switching to cluster kind-${CLUSTER_NAME}"
  kubectl config use-context kind-${CLUSTER_NAME}
fi

sleep 5
kubectl create namespace traefik
kubectl create secret tls \
  --namespace=traefik localhost-cert \
  --key=$(PWD)/bootstrap/certs/localhost/key.pem \
  --cert=$(PWD)/bootstrap/certs/localhost/cert.pem


cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: dynamic
  namespace: traefik
data:
  dynamic.toml: |
    # Dynamic configuration
    [[tls.certificates]]
    certFile = "/certs/tls.crt"
    keyFile = "/certs/tls.key"
EOF


helm upgrade --install traefik $(PWD)/apps/traefik/traefik-26.0.0.tgz \
  --namespace=traefik \
  --create-namespace \
  --wait \
  --values=$(PWD)/apps/traefik/deploy.values.yaml


sleep 5
kubectl create namespace argocd
kubectl create secret generic \
  --namespace=argocd gitserver-keys \
  --from-file=ssh_host_ecdsa_key=$(PWD)/bootstrap/ssh-gitserver/ssh_host_ecdsa_key \
  --from-file=ssh_host_ecdsa_key.pub=$(PWD)/bootstrap/ssh-gitserver/ssh_host_ecdsa_key.pub \
  --from-file=ssh_host_ed25519_key=$(PWD)/bootstrap/ssh-gitserver/ssh_host_ed25519_key \
  --from-file=ssh_host_ed25519_key.pub=$(PWD)/bootstrap/ssh-gitserver/ssh_host_ed25519_key.pub \
  --from-file=ssh_host_rsa_key=$(PWD)/bootstrap/ssh-gitserver/ssh_host_rsa_key \
  --from-file=ssh_host_rsa_key.pub=$(PWD)/bootstrap/ssh-gitserver/ssh_host_rsa_key.pub


cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: dynamic
  namespace: traefik
data:
  dynamic.toml: |
    # Dynamic configuration
    [[tls.certificates]]
    certFile = "/certs/tls.crt"
    keyFile = "/certs/tls.key"
EOF


cat <<EOF | kubectl apply -f -
apiVersion: v1
stringData:
  authorized_keys: |
    $(cat $(PWD)/bootstrap/ssh-keys/id_rsa.pub)
kind: Secret
metadata:
  name: gitserver-authkeys
  namespace: argocd
EOF

cat <<EOF | kubectl apply -f -
apiVersion: v1
data:
  sshPrivateKey: $(cat $(PWD)/bootstrap/ssh-keys/id_rsa | base64)
stringData:
  url: ssh://git@gitd/srv/git/homelab
  insecure: "true"
  name: homelab
kind: Secret
metadata:
  name: homelab
  namespace: argocd
  labels:
    argocd.argoproj.io/secret-type: repository
EOF


helm -n argocd \
    upgrade --install --create-namespace \
    gitd \
    $(PWD)/apps/gitserver/chart \
    --values=$(PWD)/apps/gitserver/deploy.values.yaml


helm -n argocd \
    upgrade --install --create-namespace \
    argocd \
    $(PWD)/apps/argocd/chart \
    --values=$(PWD)/apps/argocd/deploy.values.yaml